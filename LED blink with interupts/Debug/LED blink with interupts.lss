
LED blink with interupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000017c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a9  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  000008bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000229  00000000  00000000  00000ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035f  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  000014c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001526  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/io.h>

volatile int toggle = 0;
int main(void)
{
	EICRA |= 0B00001100;//rising edge
  90:	e9 e6       	ldi	r30, 0x69	; 105
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8c 60       	ori	r24, 0x0C	; 12
  98:	80 83       	st	Z, r24
	EIMSK |= 0B00000010;//Enable External Interrupt 1
  9a:	8d b3       	in	r24, 0x1d	; 29
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	8d bb       	out	0x1d, r24	; 29
	sei(); //Enabling  the global Interrupt
  a0:	78 94       	sei
	
    /* Set Data Direction */
	DDRB  = 0B11111110; //Pin 0 as input,reset as output
  a2:	8e ef       	ldi	r24, 0xFE	; 254
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <main+0x16>

000000a8 <__vector_2>:
}


/*Timer1 Compare Interrupt A ISR*/
ISR (INT1_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	PORTB |= 0B00100000;//Set PORTB pin 5 to 1
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	85 b9       	out	0x05, r24	; 5
	if (toggle)
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c8:	89 2b       	or	r24, r25
  ca:	21 f0       	breq	.+8      	; 0xd4 <__vector_2+0x2c>
	{
		PORTB |= 0B00100000;//set PORTB pin 5 to 1
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	03 c0       	rjmp	.+6      	; 0xda <__vector_2+0x32>
	}
	else
	{
		PORTB &= 0B11011111;//set PORTB pin 5 to 0
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	85 b9       	out	0x05, r24	; 5
	}
	toggle = 1-toggle;
  da:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  de:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	82 1b       	sub	r24, r18
  e8:	93 0b       	sbc	r25, r19
  ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	3f 91       	pop	r19
  f8:	2f 91       	pop	r18
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
